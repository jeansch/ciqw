#+TITLE: Connect IQ SDK Wrapper

This is a simple wrapper to Garmin Connect IQ SDK.

It's function in life is to provide simple commands to:

- Install SDK
- Setup a simple default config including generating a 'convenient' developer key
- Build Garmin IQ app
- Start the simulator
- Run the app on the simulator
- Build a package

* Warning

It looks like when I started the project, I already used the official sdkmanager and it did install the /Devices and fonts/ which are part on another package. I will try to find how to install it without the manager. Meanwhile, I'll add some tools to get it.

* Install CIQW

#+begin_example shell
pip install ciqw
#+end_example


* Using it

*ⓘ Prior to you first build, please install the devices files using the sdkmanager*


** Installing the SDK Manager

#+begin_example shell
ciqw-install-sdkmanager &
#+end_example

(And follow the instructions)

** Get something to build

Garmin have a github reepository with sample apps, let juste clone it and pick an app.

#+begin_example shell
git clone https://github.com/garmin/connectiq-apps
cd connectiq-apps/DanceDanceGarmin
#+end_example

** Build / run an app

You will need you run the *Connect IQ Device Simulator* bundeled in the SDK.
The command to run it is:

#+begin_example shell
ciqw-sim &
#+end_example

ⓘ On first start, ciqw tools will download and install the last "stable" version of the Garmin sdk. (You can also get a list if installable SDKs using /ciqw-list-sdks/ or install a specific sdk using /ciqw-install-sdk _version_/

Once the simulator is started, simply build and run the app:

#+begin_example shell
ciqw-run
#+end_example

ⓘ If the app is not built already, ciqw-build will be called.

ⓘ Building an app require an developer key. If not present, the key will be generated.

** Running automaticaly

You can use *ciqw-auto* to monitor sources changes and automaticaly rebuild and restart the application on the emulator !


* Dependencies

- Python3
- openssl (usualy /usr/bin/openssl) to generate the developer key
- Java runtime environment

* Some informations

Ciqw commands allows the path of the application sources you want to build as only argument.
So you can run it from outside of the directory:

#+begin_example
ciqw-build /path/of/app/sources
#+end_example

By default, *$HOME/.config/ciqw/config.ini* is used for the configuration.
That can be overrid using the *CIQW_INI* environment variable.

SDK is installed by default in *$HOME/.local/ciwq/sdks*.
Also a copy a of the zip archive and all version downloaded are kept at that place.

A quick look at the config.ini with show that the following options are tunable:

- *SDKs* path
- Key file location
- Default device to build for (fenix6 by default)
- Version of the SDK to use
- Generic *monkeyc* flags to use

ⓘ That config file is created the first time if not present.

There is few more ciqw commands, just explore it, they are quite self-explanatory.

* Motivation, Thanks

I wanted to avoid the usage of Eclipse for my developments.

Got inspiration from https://github.com/danielsiwiec/garmin-connect-seed
